apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  creationTimestamp: null
  labels:
    infra_id: 446420e7-e7fa-4af7-b7e3-97dbde7e0114
    revision_id: 6d5d7506-8a78-4185-bae0-1aa8cce0a48b
    subject: bank-of-anthos
    workflow_id: 0dd63280-1297-4207-8d7e-b2f6ef2f5c88
    workflows.argoproj.io/controller-instanceid: 446420e7-e7fa-4af7-b7e3-97dbde7e0114
  name: gcp
  namespace: litmus
spec:
  arguments:
    parameters:
    - name: adminModeNamespace
      value: litmus
    - name: appNamespace
      value: bank
  entrypoint: argowf-chaos
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
  serviceAccountName: argo-chaos
  templates:
  - inputs: {}
    metadata: {}
    name: argowf-chaos
    outputs: {}
    steps:
    - - arguments: {}
        name: install-application
        template: install-application
    - - arguments: {}
        name: install-chaos-faults
        template: install-chaos-faults
    - - arguments: {}
        name: pod-network-loss
        template: pod-network-loss
    - - arguments: {}
        name: cleanup-chaos-resources
        template: cleanup-chaos-resources
      - arguments: {}
        name: delete-application
        template: delete-application
  - container:
      args:
      - -namespace=bank
      - -typeName=resilient
      - -operation=apply
      - -timeout=400
      - -app=bank-of-anthos
      - -scope=cluster
      image: litmuschaos/litmus-app-deployer:latest
      name: ""
      resources: {}
    inputs: {}
    metadata: {}
    name: install-application
    outputs: {}
  - container:
      args:
      - kubectl apply -f /tmp/pod-network-loss-x1w.yaml -n {{workflow.parameters.adminModeNamespace}}
        && sleep 30
      command:
      - sh
      - -c
      image: litmuschaos/k8s:latest
      name: ""
      resources: {}
    inputs:
      artifacts:
      - name: pod-network-loss-x1w
        path: /tmp/pod-network-loss-x1w.yaml
        raw:
          data: |
            apiVersion: litmuschaos.io/v1alpha1
            description:
              message: |
                Injects network packet loss on pods belonging to an app deployment
            kind: ChaosExperiment
            metadata:
              name: pod-network-loss
              labels:
                name: pod-network-loss
                app.kubernetes.io/part-of: litmus
                app.kubernetes.io/component: chaosexperiment
                app.kubernetes.io/version: 3.16.0
            spec:
              definition:
                scope: Namespaced
                permissions:
                  # Create and monitor the experiment & helper pods
                  - apiGroups: [""]
                    resources: ["pods"]
                    verbs:
                      [
                        "create",
                        "delete",
                        "get",
                        "list",
                        "patch",
                        "update",
                        "deletecollection",
                      ]
                  # Performs CRUD operations on the events inside chaosengine and chaosresult
                  - apiGroups: [""]
                    resources: ["events"]
                    verbs: ["create", "get", "list", "patch", "update"]
                  # Fetch configmaps details and mount it to the experiment pod (if specified)
                  - apiGroups: [""]
                    resources: ["configmaps"]
                    verbs: ["get", "list"]
                  # Track and get the runner, experiment, and helper pods log
                  - apiGroups: [""]
                    resources: ["pods/log"]
                    verbs: ["get", "list", "watch"]
                  # for creating and managing to execute commands inside target container
                  - apiGroups: [""]
                    resources: ["pods/exec"]
                    verbs: ["get", "list", "create"]
                  # deriving the parent/owner details of the pod(if parent is anyof {deployment, statefulset, daemonsets})
                  - apiGroups: ["apps"]
                    resources: ["deployments", "statefulsets", "replicasets", "daemonsets"]
                    verbs: ["list", "get"]
                  # deriving the parent/owner details of the pod(if parent is deploymentConfig)
                  - apiGroups: ["apps.openshift.io"]
                    resources: ["deploymentconfigs"]
                    verbs: ["list", "get"]
                  # deriving the parent/owner details of the pod(if parent is deploymentConfig)
                  - apiGroups: [""]
                    resources: ["replicationcontrollers"]
                    verbs: ["get", "list"]
                  # deriving the parent/owner details of the pod(if parent is argo-rollouts)
                  - apiGroups: ["argoproj.io"]
                    resources: ["rollouts"]
                    verbs: ["list", "get"]
                  # for configuring and monitor the experiment job by the chaos-runner pod
                  - apiGroups: ["batch"]
                    resources: ["jobs"]
                    verbs: ["create", "list", "get", "delete", "deletecollection"]
                  # for creation, status polling and deletion of litmus chaos resources used within a chaos workflow
                  - apiGroups: ["litmuschaos.io"]
                    resources: ["chaosengines", "chaosexperiments", "chaosresults"]
                    verbs: ["create", "list", "get", "patch", "update", "delete"]
                image: "litmuschaos.docker.scarf.sh/litmuschaos/go-runner:3.16.0"
                imagePullPolicy: Always
                args:
                  - -c
                  - ./experiments -name pod-network-loss
                command:
                  - /bin/bash
                env:
                  - name: TARGET_CONTAINER
                    value: ""

                  # provide lib image
                  - name: LIB_IMAGE
                    value: "litmuschaos.docker.scarf.sh/litmuschaos/go-runner:3.16.0"

                  - name: NETWORK_INTERFACE
                    value: "eth0"

                  - name: TC_IMAGE
                    value: "gaiadocker/iproute2"

                  - name: NETWORK_PACKET_LOSS_PERCENTAGE
                    value: "100" #in PERCENTAGE

                  - name: TOTAL_CHAOS_DURATION
                    value: "60" # in seconds

                  # time period to wait before and after injection of chaos in sec
                  - name: RAMP_TIME
                    value: ""

                  ## percentage of total pods to target
                  - name: PODS_AFFECTED_PERC
                    value: ""

                  - name: DEFAULT_HEALTH_CHECK
                    value: "false"

                  - name: TARGET_PODS
                    value: ""

                  # To select pods on specific node(s)
                  - name: NODE_LABEL
                    value: ""

                  # provide the name of container runtime
                  # for litmus LIB, it supports docker, containerd, crio
                  # for pumba LIB, it supports docker only
                  - name: CONTAINER_RUNTIME
                    value: "containerd"

                  # provide the destination ips
                  # chaos injection will be triggered for these destination ips
                  - name: DESTINATION_IPS
                    value: ""

                  # provide the destination hosts
                  # chaos injection will be triggered for these destination hosts
                  - name: DESTINATION_HOSTS
                    value: ""

                  # provide the socket file path
                  - name: SOCKET_PATH
                    value: "/run/containerd/containerd.sock"

                  ## it defines the sequence of chaos execution for multiple target pods
                  ## supported values: serial, parallel
                  - name: SEQUENCE
                    value: "parallel"

                labels:
                  name: pod-network-loss
                  app.kubernetes.io/part-of: litmus
                  app.kubernetes.io/component: experiment-job
                  app.kubernetes.io/runtime-api-usage: "true"
                  app.kubernetes.io/version: 3.16.0
    metadata: {}
    name: install-chaos-faults
    outputs: {}
  - container:
      args:
      - -file=/tmp/chaosengine.yaml
      - -saveName=/tmp/engine-name
      image: litmuschaos/litmus-checker:latest
      name: ""
      resources: {}
    inputs:
      artifacts:
      - name: pod-network-loss
        path: /tmp/chaosengine.yaml
        raw:
          data: |
            apiVersion: litmuschaos.io/v1alpha1
            kind: ChaosEngine
            metadata:
              annotations:
                probeRef: '[{"name":"check-frontend-access-url-n9ZcbSV0TZOUTf3x63pZJg","mode":"Continuous"}]'
              generateName: pod-network-loss
              labels:
                context: "{{workflow.parameters.appNamespace}}_bank-of-anthos"
                workflow_name: gcp
                workflow_run_id: "{{ workflow.uid }}"
              namespace: "{{workflow.parameters.adminModeNamespace}}"
            spec:
              appinfo:
                appkind: deployment
                applabel: name=balancereader
                appns: bank
              chaosServiceAccount: litmus-admin
              components:
                runner:
                  imagePullPolicy: Always
              engineState: active
              experiments:
                - name: pod-network-loss
                  spec:
                    components:
                      env:
                        - name: TOTAL_CHAOS_DURATION
                          value: "90"
                        - name: NETWORK_INTERFACE
                          value: eth0
                        - name: NETWORK_PACKET_LOSS_PERCENTAGE
                          value: "100"
                        - name: CONTAINER_RUNTIME
                          value: containerd
                        - name: SOCKET_PATH
                          value: /run/containerd/containerd.sock
                    probe:
                      - httpProbe/inputs:
                          method:
                            get:
                              criteria: ==
                              responseCode: "200"
                          responseTimeout: 100
                          url: http://frontend.bank.svc.cluster.local:80
                        mode: Continuous
                        name: check-frontend-access-url
                        runProperties:
                          attempt: 2
                          interval: 100ms
                          probeTimeout: 1s
                        type: httpProbe
              jobCleanUpPolicy: retain
    metadata:
      labels:
        weight: "10"
    name: pod-network-loss
    outputs: {}
  - container:
      args:
      - -namespace=bank
      - -typeName=resilient
      - -operation=delete
      - -app=bank-of-anthos
      image: litmuschaos/litmus-app-deployer:latest
      name: ""
      resources: {}
    inputs: {}
    metadata: {}
    name: delete-application
    outputs: {}
  - container:
      args:
      - kubectl delete chaosengine -l workflow_run_id={{workflow.uid}} -n {{workflow.parameters.adminModeNamespace}}
      command:
      - sh
      - -c
      image: litmuschaos/k8s:latest
      name: ""
      resources: {}
    inputs: {}
    metadata: {}
    name: cleanup-chaos-resources
    outputs: {}
status:
  finishedAt: null
  startedAt: null
