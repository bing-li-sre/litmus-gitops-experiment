apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  creationTimestamp: null
  labels:
    infra_id: 446420e7-e7fa-4af7-b7e3-97dbde7e0114
    revision_id: 25bcf397-a4d1-4605-af8b-97d86237ce25
    subject: '{{workflow.parameters.context}}'
    workflow_id: da378c53-d132-485d-9304-3a6c1c381832
    workflows.argoproj.io/controller-instanceid: 446420e7-e7fa-4af7-b7e3-97dbde7e0114
  name: retain
  namespace: litmus
spec:
  arguments:
    parameters:
    - name: adminModeNamespace
      value: litmus
    - name: context
      value: node-cpu-hog_infra
  entrypoint: argowf-chaos
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
  serviceAccountName: argo-chaos
  templates:
  - inputs: {}
    metadata: {}
    name: argowf-chaos
    outputs: {}
    steps:
    - - arguments: {}
        name: install-chaos-faults
        template: install-chaos-faults
    - - arguments: {}
        name: run-chaos
        template: run-chaos
    - - arguments: {}
        name: cleanup-chaos-resources
        template: cleanup-chaos-resources
  - container:
      args:
      - kubectl apply -f /tmp/node-cpu-hog.yaml -n {{workflow.parameters.adminModeNamespace}}
      command:
      - sh
      - -c
      image: litmuschaos/k8s:latest
      name: ""
      resources: {}
    inputs:
      artifacts:
      - name: install-chaos-faults
        path: /tmp/node-cpu-hog.yaml
        raw:
          data: |
            apiVersion: litmuschaos.io/v1alpha1
            description:
              message: |
                Give a cpu spike on a node belonging to a deployment
            kind: ChaosExperiment
            metadata:
              name: node-cpu-hog
            spec:
              definition:
                scope: Cluster
                permissions:
                  - apiGroups:
                      - ""
                      - "batch"
                      - "apps"
                      - "litmuschaos.io"
                    resources:
                      - "jobs"
                      - "pods"
                      - "pods/log"
                      - "events"
                      - "chaosengines"
                      - "chaosexperiments"
                      - "chaosresults"
                    verbs:
                      - "create"
                      - "list"
                      - "get"
                      - "patch"
                      - "update"
                      - "delete"
                  - apiGroups:
                      - ""
                    resources:
                      - "nodes"
                    verbs:
                      - "get"
                      - "list"
                image: "litmuschaos.docker.scarf.sh/litmuschaos/go-runner:3.16.0"
                imagePullPolicy: Always
                args:
                - -c
                - ./experiments -name node-cpu-hog
                command:
                - /bin/bash
                env:

                - name: TOTAL_CHAOS_DURATION
                  value: '60'

                # Period to wait before and after injection of chaos in sec
                - name: RAMP_TIME
                  value: ''

                ## ENTER THE NUMBER OF CORES OF CPU FOR CPU HOGGING
                ## OPTIONAL VALUE IN CASE OF EMPTY VALUE IT WILL TAKE NODE CPU CAPACITY
                - name: NODE_CPU_CORE
                  value: ''

                # provide lib image
                - name: LIB_IMAGE
                  value: 'litmuschaos.docker.scarf.sh/litmuschaos/go-runner:3.16.0'

                labels:
                  name: node-cpu-hog
    metadata: {}
    name: install-chaos-faults
    outputs: {}
  - container:
      args:
      - -file=/tmp/chaosengine-run-chaos.yaml
      - -saveName=/tmp/engine-name
      image: docker.io/litmuschaos/litmus-checker:2.11.0
      name: ""
      resources: {}
    inputs:
      artifacts:
      - name: run-chaos
        path: /tmp/chaosengine-run-chaos.yaml
        raw:
          data: |
            apiVersion: litmuschaos.io/v1alpha1
            kind: ChaosEngine
            metadata:
              namespace: "{{workflow.parameters.adminModeNamespace}}"
              labels:
                context: "{{workflow.parameters.context}}"
                workflow_run_id: "{{ workflow.uid }}"
                workflow_name: retain
              annotations:
                probeRef: '[{"name":"nginx-health-check","mode":"SOT"}]'
              generateName: run-chaos
            spec:
              jobCleanUpPolicy: retain
              engineState: active
              chaosServiceAccount: litmus-admin
              experiments:
                - name: node-cpu-hog
                  spec:
                    components:
                      env:
                        - name: NODE_CPU_CORE
                          value: "1"
                        - name: TOTAL_CHAOS_DURATION
                          value: "60"
    metadata:
      labels:
        weight: "10"
    name: run-chaos
    outputs: {}
  - container:
      args:
      - kubectl delete chaosengine -l workflow_run_id={{workflow.uid}} -n {{workflow.parameters.adminModeNamespace}}
      command:
      - sh
      - -c
      image: litmuschaos/k8s:latest
      name: ""
      resources: {}
    inputs: {}
    metadata: {}
    name: cleanup-chaos-resources
    outputs: {}
status:
  finishedAt: null
  startedAt: null
